$g-gutter: 30px !default;
$g-context: 12 !default;
$g-prefix: 'g' !default;

@mixin g-container($nested: false, $gutter: $g-gutter) {
  display: flex;
  flex-wrap: wrap;
  @if $nested {
    flex: 0 0 100%;
  }
  @else {
    margin: 0 calc(-#{$gutter} / 2);
  }
}

@mixin g-item($rows: false, $context: $g-context, $gutter: $g-gutter) {
  @if $rows {
    @if(unitless($rows)) {
      flex: 0 0 percentage($rows / $context);
      max-width: percentage($rows / $context);
    }
    @else {
      flex: 0 0 $rows;
      max-width: $rows;
    }
  }
  @else {
    flex-grow: 0;
    flex-shrink: 0;
  }
  padding-right: calc(#{$gutter} / 2);
  padding-left: calc(#{$gutter} / 2);
}

@mixin g-span($rows: false, $context: $g-context) {
  @if $rows {
    @if(unitless($rows)) {
      flex: 0 0 percentage($rows / $context);
      max-width: percentage($rows / $context);
    }
    @else {
      flex: 0 0 $rows;
      max-width: $rows;
    }
  }
  @else {
    flex-grow: 0;
    flex-shrink: 0;
  }
}

@mixin g-gutters($gutter: $g-gutter) {
  padding-right: calc(#{$gutter} / 2);
  padding-left: calc(#{$gutter} / 2);
}

@mixin g-push($push, $context: $g-context) {
  margin-left: percentage($push / $context);
}

/*
 *
 * Pullout element within grid item
 *
 * @param $direction left, right or both
 * @param $pull Number of grid columns to pull
 * @param $rows Explicit width (in grid columns) of pullout element
 * @param $context The grid column context - how wide (in grid columns) is the parent grid item?
 * @param $gutter The width of the grid gutter
 *
 */

@mixin g-pullout($direction, $pull, $rows: false, $context: $g-context, $gutter: $g-gutter) {
  @if($direction == 'left' ) {
    margin-left: calc(#{percentage($pull / $context) * -1} - (#{$gutter} * #{$pull / $context}));
  }
  @elseif($direction == 'right' ) {
    margin-right: calc(#{percentage($pull / $context) * -1} - (#{$gutter} * #{$pull / $context}));
  }
  @elseif($direction == 'both' ) {
    margin-left: calc(#{percentage($pull / $context) * -1} - (#{$gutter} * #{$pull / $context}));
    margin-right: calc(#{percentage($pull / $context) * -1} - (#{$gutter} * #{$pull / $context}));
  }
  @if($rows) {
    width: calc( (100% + #{$gutter}) * #{$rows / $context} - #{$gutter} );
  }
}

/*
 *
 * Build a grid system.
 *
 * @param $breakpoints A sass map with min-width and max-width definitions
 *
 * $breakpoints: (
 *   s: (
 *    min-width: null,
 *     max-width: 767px
 *   ),
 *   m: (
 *     min-width: 768px,
 *     max-width: 979px
 *   ),
 *   l: (
 *     min-width: 980px,
 *     max-width: 1279px
 *   ),
 *   xl: (
 *     min-width: 1280px,
 *     max-width: null
 *   )
 * );
 *
 */
@mixin g-build-breakpoints($breakpoints, $prefix: $g-prefix){

  @each $label, $map in $breakpoints {
    $min-width: map-get($map, min-width);
    $max-width: map-get($map, max-width);
    $media-query: null;

    @if ($min-width and $max-width) {
      $media-query: $min-width (max-width $max-width);
    }
    @elseif ($min-width){
      $media-query: $min-width;
    }
    @elseif ($max-width){
      $media-query: max-width $max-width;
    }

    @if ($media-query) {
      /* #{$media-query} */
      @include breakpoint($media-query) {
        [class^='#{$prefix}-item-#{$label}-'],
        [class*=' #{$prefix}-item-#{$label}-'] {
          @include g-gutters;
        }
        .#{$prefix}-hidden-#{$label} {
          display: none;
        }
        @for $i from 1 through $g-context {
          .#{$prefix}-item-#{$label}-#{$i} {
            @include g-span($i, $g-context);
          }
        }
        @for $i from 1 through ($g-context - 1) {
          .#{$prefix}-push-#{$label}-#{$i} {
            @include g-push($i);
          }
        }
      }
    }
  }
}
